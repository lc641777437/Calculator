C51 COMPILER V9.00   STACK                                                                 04/08/2015 12:35:48 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE STACK
OBJECT MODULE PLACED IN stack.OBJ
COMPILER INVOKED BY: D:\software\Keil\C51\BIN\C51.EXE stack.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "includes.h"           //¶ÑÕ» stack.c
   2          unsigned char code yxj[7][7] = {        // + - * / ( ) #
   3                  2,2,0,0,0,2,2, // + 
   4                  2,2,0,0,0,2,2, // -
   5                  2,2,2,2,0,2,2, // * 
   6                  2,2,2,2,0,2,2, // / 
   7                  0,0,0,0,0,1,3, // ( 
   8                  2,2,2,2,3,2,2, // ) 
   9                  0,0,0,0,0,3,1, // # 
  10          }; 
  11          void Init_OPTR( OPTR *s,char *TR1 ) { 
  12   1              s->rbase = TR1; 
  13   1              s->rtop = s->rbase; 
  14   1      } 
  15          void PUSH_OPTR(OPTR *s,char elem) {
  16   1              * (s->rtop) = elem; 
  17   1              s->rtop ++; 
  18   1      } 
  19          char POP_OPTR(OPTR *s) { 
  20   1              char temp; 
  21   1              s->rtop--; 
  22   1              temp= *(s->rtop); 
  23   1              return temp; 
  24   1      } 
  25          void Init_OPND(OPND *s,double *ND1) { 
  26   1              s->dbase = ND1; 
  27   1              s->dtop = s->dbase; 
  28   1      } 
  29          void PUSH_OPND(OPND *s,double elem) { 
  30   1              * (s->dtop) = elem;
  31   1              s->dtop ++; 
  32   1      } 
  33          double POP_OPND(OPND *s) { 
  34   1              double temp; 
  35   1              s->dtop--; 
  36   1              temp= *(s->dtop); 
  37   1              return temp; 
  38   1      } 
  39          char Precede(char a,char b) { 
  40   1              char i,j; 
  41   1              switch(a) { 
  42   2                      case '+':i=0;break; 
  43   2                      case '-':i=1;break; 
  44   2                      case '*':i=2;break; 
  45   2                      case '/':i=3;break; 
  46   2                      case '(':i=4;break; 
  47   2                      case ')':i=5;break; 
  48   2                      case '#':i=6;break; 
  49   2                      default :i=0;break; 
  50   2              } 
  51   1              switch(b) { 
  52   2                      case '+':j=0;break; 
  53   2                      case '-':j=1;break; 
  54   2                      case '*':j=2;break; 
  55   2                      case '/':j=3;break; 
C51 COMPILER V9.00   STACK                                                                 04/08/2015 12:35:48 PAGE 2   

  56   2                      case '(':j=4;break; 
  57   2                      case ')':j=5;break; 
  58   2                      case '#':j=6;break; 
  59   2                      default :j=0;break; 
  60   2              } 
  61   1              return yxj[i][j]; 
  62   1      } 
  63          double Operate(double num1,char theta,double num2) { 
  64   1              double num3; 
  65   1              switch(theta) { 
  66   2                      case '+':num3 = num1 + num2;break; 
  67   2                      case '-':num3 = num1 - num2;break;
  68   2                      case '*':num3 = num1 * num2;break; 
  69   2                      case '/':num3 = num1 / num2;break; 
  70   2              } 
  71   1              return num3; 
  72   1      } 
  73          void Pushnum(OPND *sq,double c) { 
  74   1              double temp1,temp2; 
  75   1              temp1 = POP_OPND(sq); 
  76   1              temp2 = temp1 * 10 + c; 
  77   1              PUSH_OPND(sq,temp2); 
  78   1      } 
  79          void Pushdp(OPND *sq,char flag,double c) { 
  80   1              double temp3,temp4; 
  81   1              char i; 
  82   1              double j = 1; 
  83   1              for(i=0;i<flag;i++) { 
  84   2                      j = j * 0.1; 
  85   2              } 
  86   1              temp3 = POP_OPND(sq); 
  87   1              temp4 = temp3 + c * j; 
  88   1              PUSH_OPND(sq,temp4); 
  89   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    708    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      66
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
